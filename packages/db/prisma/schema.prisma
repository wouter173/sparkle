datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Guild {
  id        String    @id @unique
  name      String
  thumbnail String    @db.Text
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guild")
}

model Message {
  id          String      @id @unique
  message     String      @db.Text
  reactions   Int
  guildId     String
  guild       Guild       @relation(fields: [guildId], references: [id])
  authorId    String
  author      DiscordUser @relation(fields: [authorId], references: [id])
  attachments String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message")
}

model DiscordUser {
  id            String    @id @unique
  name          String
  discriminator String
  avatar        String    @db.Text
  messages      Message[]
  user          User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discord_user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?

  discordId   String      @unique
  discordUser DiscordUser @relation(fields: [discordId], references: [id])

  accounts Account[]
  sessions Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
